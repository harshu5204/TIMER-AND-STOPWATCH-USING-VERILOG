module STOP(
    input clock,
    input reset,
    input start,
    output a0, b0, c0, d0, e0, f0, g0, a1, b1, c1, d1, e1, f1, g1, a2, b2, c2, d2, e2, f2, g2, a3, b3, c3, d3, e3, f3, g3
);

reg [3:0] reg_d0, reg_d1, reg_d2, reg_d3; // registers that will hold the individual counts
reg [23:0] ticker; // 23 bits needed to count up to 50M bits
wire click;

always @(posedge clock or posedge reset) begin
    if (reset)
        ticker <= 0;
    else if (ticker == 5000000) // if it reaches the desired max value reset it
        ticker <= 0;
    else if (start) // only start if the input is set high
        ticker <= ticker + 1;
end

assign click = ((ticker == 5000000) ? 1'b1 : 1'b0); // click to be assigned high every 0.1 second

always @(posedge clock or posedge reset) begin
    if (reset) begin
        reg_d0 <= 0;
        reg_d1 <= 0;
        reg_d2 <= 0;
        reg_d3 <= 0;
    end
    else if (click) begin // increment at every click
        if (reg_d0 == 9) begin // xxx9 - the 0.1 second digit
            reg_d0 <= 0;
            if (reg_d1 == 9) begin // xx99
                reg_d1 <= 0;
                if (reg_d2 == 5) begin // x599 - the two digit seconds digits
                    reg_d2 <= 0;
                    if (reg_d3 == 9) // 9599 - The minute digit
                        reg_d3 <= 0;
                    else
                        reg_d3 <= reg_d3 + 1;
                end
                else
                    reg_d2 <= reg_d2 + 1;
            end
            else
                reg_d1 <= reg_d1 + 1;
        end
        else
            reg_d0 <= reg_d0 + 1;
    end
end

// 7 segment encoding
// 0
// ---
// 5 | | 1
// --- <- 6
// 4 | | 2
// ---
// 3
// through data flow modelling

// d0
assign a0 = ~((reg_d0[3]) | (reg_d0[1]) | (reg_d0[2] & reg_d0[0]) | (~reg_d0[2] & ~reg_d0[0]));
assign b0 = ~((~reg_d0[2]) | (reg_d0[1] & reg_d0[0]) | (~reg_d0[1] & ~reg_d0[0]));
assign c0 = ~((reg_d0[2]) | (~reg_d0[1]) | (reg_d0[0]));
assign d0 = ~((reg_d0[3]) | (~reg_d0[2] & ~reg_d0[0]) | (~reg_d0[2] & reg_d0[1]) | (reg_d0[2] & ~reg_d0[1] & reg_d0[0]) | (reg_d0[1] & ~reg_d0[0]));
assign e0 = ~((~reg_d0[2] & ~reg_d0[0]) | (reg_d0[1] & ~reg_d0[0]));
assign f0 = ~((reg_d0[3]) | (reg_d0[2] & ~reg_d0[1]) | (reg_d0[2] & ~reg_d0[0]) | (~reg_d0[1] & ~reg_d0[0]));
assign g0 = ~((reg_d0[3]) | (~reg_d0[2] & reg_d0[1]) | (reg_d0[2] & ~reg_d0[1]) | (reg_d0[2] & ~reg_d0[0]));

// d1
assign a1 = ~((reg_d1[3]) | (reg_d1[1]) | (reg_d1[2] & reg_d1[0]) | (~reg_d1[2] & ~reg_d1[0]));
assign b1 = ~((~reg_d1[2]) | (reg_d1[1] & reg_d1[0]) | (~reg_d1[1] & ~reg_d1[0]));
assign c1 = ~((reg_d1[2]) | (~reg_d1[1]) | (reg_d1[0]));
assign d1 = ~((reg_d1[3]) | (~reg_d1[2] & ~reg_d1[0]) | (~reg_d1[2] & reg_d1[1]) | (reg_d1[2] & ~reg_d1[1] & reg_d1[0]) | (reg_d1[1] & ~reg_d1[0]));
assign e1 = ~((~reg_d1[2] & ~reg_d1[0]) | (reg_d1[1] & ~reg_d1[0]));
assign f1 = ~((reg_d1[3]) | (reg_d1[2] & ~reg_d1[1]) | (reg_d1[2] & ~reg_d1[0]) | (~reg_d1[1] & ~reg_d1[0]));
assign g1 = ~((reg_d1[3]) | (~reg_d1[2] & reg_d1[1]) | (reg_d1[2] & ~reg_d1[1]) | (reg_d1[2] & ~reg_d1[0]));

// d2
assign a2 = ~((reg_d2[3]) | (reg_d2[1]) | (reg_d2[2] & reg_d2[0]) | (~reg_d2[2] & ~reg_d2[0]));
assign b2 = ~((~reg_d2[2]) | (reg_d2[1] & reg_d2[0]) | (~reg_d2[1] & ~reg_d2[0]));
assign c2 = ~((reg_d2[2]) | (~reg_d2[1]) | (reg_d2[0]));
assign d2 = ~((reg_d2[3]) | (~reg_d2[2] & ~reg_d2[0]) | (~reg_d2[2] & reg_d2[1]) | (reg_d2[2] & ~reg_d2[1] & reg_d2[0]) | (reg_d2[1] & ~reg_d2[0]));
assign
assign e2 = ~((~reg_d2[2] & ~reg_d2[0]) | (reg_d2[1] & ~reg_d2[0])) ; 
assign f2 = ~((reg_d2[3]) | (reg_d2[2] & ~reg_d2[1]) | (reg_d2[2] & ~reg_d2[0]) | 
(~reg_d2[1] & ~reg_d2[0])) ; 
assign g2 = ~((reg_d2[3]) | (~reg_d2[2] & reg_d2[1]) | (reg_d2[2] & ~reg_d2[1]) | 
(reg_d2[2] & ~reg_d2[0])) ; 

// d3 
assign a3 = ~((reg_d3[3]) | (reg_d3[1]) | (reg_d3[2] & reg_d3[0]) | (~reg_d3[2] & 
~reg_d3[0])) ; 
assign b3 = ~((~reg_d3[2]) | (reg_d3[1] & reg_d3[0]) | (~reg_d3[1] & ~reg_d3[0])) ; 
assign c3 = ~((reg_d3[2]) | (~reg_d3[1]) | (reg_d3[0])) ; 
assign d3 = ~((reg_d3[3]) | (~reg_d3[2] & ~reg_d3[0]) | (~reg_d3[2] & reg_d3[1]) | 
(reg_d3[2] & ~reg_d3[1] & reg_d3[0]) | (reg_d3[1] & ~reg_d3[0])) ; 
assign e3 = ~((~reg_d3[2] & ~reg_d3[0]) | (reg_d3[1] & ~reg_d3[0])) ; 
assign f3 = ~((reg_d3[3]) | (reg_d3[2] & ~reg_d3[1]) | (reg_d3[2] & ~reg_d3[0]) | 
(~reg_d3[1] & ~reg_d3[0])) ; 
assign g3 = ~ ((reg_d3[3]) | (~reg_d3[2] & reg_d3[1]) | (reg_d3[2] & ~reg_d3[1]) | 
(reg_d3[2] & ~reg_d3[0])) ; 
endmodule
